#!/bin/bash

# Trichosporonales annotation pipeline

# Marco Guerreiro
# 03 September 2024

# Max Planck Institute for Evolutionary Biology,
# August-Thienemann-Str. 2, 24306 PlÃ¶n, Germany
# Email: mguerreiro@evolbio.mpg.de

# Christian-Albrechts University of Kiel,
# Am Botanischen Garten 1-9, 24118 Kiel, Germany
# Email: mguerreiro@bot.uni-kiel.de

# File name, without file extension. The genome assembly must be .fna and the proteome must be .faa
SPECIES=Cryptococcus_deneoformans_JEC21
 

# Dataset to use for the analyses. augustus or funannotate
funannotate=Yes
funannotate_species=cryptococcus
BUSCO=Yes
SignalP6=No
tRNAscan=Yes
tRNAfiltering=Yes
CAZymes=Yes
EffectorP3=No
eggNOG=Yes
#CodonR=No
CodonR_filtered=Yes
tAI_pathways_preprocess=Yes
tAI_pathways_processed=Yes
tAI_all_pathways=Yes
RSCU=Yes
GenomeStats=Yes


##### Configuration ####
DATASET=funannotate

#### Path to directories ####
# path to genome directory
GENOMES_DIR=~/Data/Genomes
# Path to store proteomes
PROTEOME_DIR=~/Data/$DATASET/Proteomes
# Path to store GFF files
GFF_DIR=~/Data/$DATASET/GFF
# Path to store CDS files
CDS_DIR=~/Data/$DATASET/CDS
# Path to store predicted secretomes
SECRETOME_DIR=~/Data/$DATASET/Secretomes_SignalP6.0
SECRETOME_CDS_DIR=~/Data/$DATASET/Secretomes_SignalP6.0_CDS
SECRETED_CAZYOME=~/Data/$DATASET/Secretomes_SignalP6.0_CAZyome
SECRETED_CAZYOME_CDS=~/Data/$DATASET/Secretomes_SignalP6.0_CAZyome_CDS
# Path to store predicted tRNA
TRNA_DIR=~/Results/tRNAscan-SE_2.0.9
# Path to perform TE prediction with REPET pipeline
TE_DIR=~/REPET3
# Path to store BUSCO results
BUSCO_DIR=~/Results/$DATASET/BUSCO_5.3.2
# Path to store SignalP6 results
SIGNALP6_DIR=~/Results/$DATASET/SignalP6.0
# Path to store CAZymes results
CAZYMES_DIR=~/Results/$DATASET/CAZymes
# Path to store predicted CAZyomes
CAZYOME=~/Data/$DATASET/CAZyome
CAZYOME_CDS=~/Data/$DATASET/CAZyome_CDS
# Folder for protein IDs
PROT_IDS=~/Data/$DATASET/Protein_IDs
# Path to store predicted effectors
EFFECTORS=~/Results/$DATASET/EffectorP3.0_SignalP6.0
# Path to Effectorome
EFFECTOROME=~/Data/$DATASET/Effectorome_SignalP6.0
# Path to EggNOG analyses
EggNOG_DIR=~/Results/$DATASET/EggNOG
# Path to tAI results
tAI_DIR=~/Results/$DATASET/tAI
tAI_secretome_DIR=~/Results/$DATASET/tAI_secretome
tAI_pathways_DIR=~/Results/$DATASET/tAI_pathways
# Path to funannotate results
FUN_DIR=~/Results/funannotate/Pipeline_run
# Path for RSCU results
RSCU_DIR=~/Results/$DATASET/RSCU

#### Path to tools ####
AUGUSTUS=~/Tools/augustus-3.3.3/bin/augustus
getAnnoFasta=~/Tools/augustus-3.3.3/scripts/getAnnoFasta.pl
# busco is a conda environment
# conda is located in Tools/miniconda3
# signalp6 is a conda environment
# tRNAscan is a conda environment
DBCAN2=~/Tools/dbCAN2
EffectorP=~/Tools/EffectorP_3.0.0-beta/EffectorP.py
EGGNOG=~/Tools/eggNOG/eggnog-mapper-2.0.8.post2/emapper.py # updated 23-04-2024
# pyfasta is a conda environment with python 3.8
export PATH="Tools/codonR:$PATH"
codonZ=~/Tools/codonR/codonZ
codonM=~/Tools/codonR/codonM
# funannotate is a conda environment


#### Versions used ####
# augustus 3.3.3
# busco 5.3.2
# signalp 6.0g
# pyfasta 0.5.2
# tRNAscan-SE 2.0.9
# dbCAN2 HMMs v10
# EffectorP 3.0.0 beta
# codonR package (codonZ, codonM) and codonW downloaded from: http://people.cryst.bbk.ac.uk/~fdosr01/tAI/


#### Analyses ####

### funannotate ###
    # Runs funannotate with "funannotate_species" parameter as augustus model
    if [ "$funannotate" = "Yes" ]
    then

    source Tools/miniconda3/etc/profile.d/conda.sh
    conda activate funannotate

    # The script sorts contigs by size, starting with shortest contigs it uses minimap2 to find contigs duplicated elsewhere, and then removes duplicated contigs.
    # Minimum length of contig to keep. Default = 500
    funannotate clean -i $GENOMES_DIR/$SPECIES.fna -o $FUN_DIR/$SPECIES.cleaned

    # sorts the input contigs by size (longest->shortest) and then relabels the contigs with a simple name (e.g. scaffold_1). Augustus can have problems with some complicated contig names.
    funannotate sort -i $FUN_DIR/$SPECIES.cleaned -b contig -o $FUN_DIR/$SPECIES.cleaned.sorted

    # Default is to run very simple repeat masking with tantan.
    funannotate mask -i $FUN_DIR/$SPECIES.cleaned.sorted --cpus 28 -o $FUN_DIR/$SPECIES.cleaned.sorted.masked

    # Runs gene prediction pipeline
    funannotate predict -i $FUN_DIR/$SPECIES.cleaned.sorted.masked -o $FUN_DIR/$SPECIES --species $SPECIES --cpus 28 --augustus_species $funannotate_species --busco_seed_species $funannotate_species --busco_db basidiomycota --force --no-progress

    # Move files to folder
    mv $FUN_DIR/$SPECIES.cleaned $FUN_DIR/$SPECIES.cleaned.sorted $FUN_DIR/$SPECIES.cleaned.sorted.masked $FUN_DIR/$SPECIES/

    # Change protein header, move file to proteome folder and renames extension to .faa
    awk '/^>/{print ">'$SPECIES'|" ++i; next}{print}' < $FUN_DIR/$SPECIES/predict_results/$SPECIES.proteins.fa > $PROTEOME_DIR/Proteome_headers/$SPECIES.faa

    # Change CDS header and move file to CDS folder
    awk '/^>/{print ">'$SPECIES'|" ++i; next}{print}' < $FUN_DIR/$SPECIES/predict_results/$SPECIES.cds-transcripts.fa > $CDS_DIR/CDS_headers/$SPECIES.codingseq

    # Protein IDs
    cat $PROTEOME_DIR/Proteome_headers/$SPECIES.faa | grep ">" | sed 's/>//' > $PROT_IDS/$SPECIES'_proteinIDs.txt'

    # Sequence length
    ~/Tools/seqkit fx2tab --length --name $CDS_DIR/CDS_headers/$SPECIES.codingseq > ~/Data/$DATASET/CDS_length/$SPECIES.length
    cat ~/Data/$DATASET/CDS_length/*.length > ~/Data/$DATASET/CDS_length/all.length
    fi


### BUSCO ###
    # Runs BUSCO on Basidiomycota
    # Needs to source conda.sh to be able to activate envs
    if [ "$BUSCO" = "Yes" ]
    then
    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate busco

    ## basidiomycota ##
    busco -i $PROTEOME_DIR/Proteome_headers/$SPECIES.faa -l basidiomycota --out_path $BUSCO_DIR/basidiomycota/ -o $SPECIES'_basidiomycota' -m prot -c 10 --download_path ~/Tools/miniconda3/envs/busco/busco_downloads -f

    if [ ! -f $BUSCO_DIR/BUSCO_Results_basidiomycota.txt ]
    then
        touch $BUSCO_DIR/BUSCO_Results_basidiomycota.txt
        echo -e ""Species"\t"Lineage"\t"Complete"\t"Single-copy"\t"Duplicated"\t"Fragmented"\t"Missing"" > $BUSCO_DIR/BUSCO_Results_basidiomycota.txt
    fi

    # Adds results to the file
    C=$(grep -o -P '(?<=C\:).*?(?=%)' $BUSCO_DIR/basidiomycota/$SPECIES'_basidiomycota'/'short_summary.specific.basidiomycota_odb10.'$SPECIES'_basidiomycota.json')
    S=$(grep -o -P '(?<=S\:).*?(?=%)' $BUSCO_DIR/basidiomycota/$SPECIES'_basidiomycota'/'short_summary.specific.basidiomycota_odb10.'$SPECIES'_basidiomycota.json')
    D=$(grep -o -P '(?<=D\:).*?(?=%)' $BUSCO_DIR/basidiomycota/$SPECIES'_basidiomycota'/'short_summary.specific.basidiomycota_odb10.'$SPECIES'_basidiomycota.json')
    F=$(grep -o -P '(?<=F\:).*?(?=%)' $BUSCO_DIR/basidiomycota/$SPECIES'_basidiomycota'/'short_summary.specific.basidiomycota_odb10.'$SPECIES'_basidiomycota.json')
    M=$(grep -o -P '(?<=M\:).*?(?=%)' $BUSCO_DIR/basidiomycota/$SPECIES'_basidiomycota'/'short_summary.specific.basidiomycota_odb10.'$SPECIES'_basidiomycota.json')
    echo -e "$SPECIES\t"basidiomycota_odb10"\t$C\t$S\t$D\t$F\t$M" >> $BUSCO_DIR/BUSCO_Results_basidiomycota.txt

    fi


### SignalP6 ###
    # Needs to source conda.sh to be able to activate envs
    if [ "$SignalP6" = "Yes" ]
    then
    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate signalp6

    signalp6 --fastafile $PROTEOME_DIR/Proteome_headers/$SPECIES.faa --organism euk -bs 30 --mode fast -wp 30 -od $SIGNALP6_DIR/Results/$SPECIES
    cp $SIGNALP6_DIR/Results/$SPECIES/prediction_results.txt $SIGNALP6_DIR/$SPECIES'_summary.signalp6'

    cat $SIGNALP6_DIR/$SPECIES'_summary.signalp6' | grep "SP" > $SIGNALP6_DIR/$SPECIES'_signalp6.txt'
    awk '(NR>1)' $SIGNALP6_DIR/$SPECIES'_signalp6.txt' | awk '{print $1}' > $SIGNALP6_DIR/$SPECIES'_secreted_proteinIDs.txt'
    cp $SIGNALP6_DIR/$SPECIES'_secreted_proteinIDs.txt' $PROT_IDS/

    conda deactivate


    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate pyfasta
    # Extracts secretome
    pyfasta extract --fasta $PROTEOME_DIR/Proteome_headers/$SPECIES.faa --file $SIGNALP6_DIR/$SPECIES'_secreted_proteinIDs.txt' --header > $SECRETOME_DIR/$SPECIES'_secretome.faa'

    # Extract secreted protein coding sequences (CDS)
    pyfasta extract --fasta $CDS_DIR/CDS_headers/$SPECIES.codingseq --file $SIGNALP6_DIR/$SPECIES'_secreted_proteinIDs.txt' --header > $SECRETOME_CDS_DIR/$SPECIES'_secretome.codingseq'

    fi


### tRNAscan ###
    if [ "$tRNAscan" = "Yes" ]
    then
    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate tRNAscan-SE

    # remove files if exist, otherwise the pipeline will get stuck
    rm $TRNA_DIR/$SPECIES.out $TRNA_DIR/$SPECIES.stats $TRNA_DIR/$SPECIES'_tRNA.gff' $TRNA_DIR/$SPECIES'_tRNA.fasta'

    tRNAscan-SE -o $TRNA_DIR/$SPECIES.out -m $TRNA_DIR/$SPECIES.stats --gff $TRNA_DIR/$SPECIES'_tRNA.gff' --fasta $TRNA_DIR/$SPECIES'_tRNA.fasta' -q $GENOMES_DIR/$SPECIES.fna -q
    fi


### tRNA filtering ###
    # Removes pseudogenes and scores below 30
    if [ "$tRNAfiltering" = "Yes" ]
    then
    cat $TRNA_DIR/$SPECIES.out | grep "pseudo" --invert-match | awk '{if ($9>=30) print $0}' > $TRNA_DIR/$SPECIES'.out.filtered'
    fi


### CAZymes ###
    if [ "$CAZymes" = "Yes" ]
    then
    # echo "hmmscan"
    hmmscan --domtblout $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm' $DBCAN2/dbCAN-fam-HMMs.txt.v10 $PROTEOME_DIR/Proteome_headers/$SPECIES.faa > $CAZYMES_DIR/Results/$SPECIES'.faa.out'
    # echo "hmmscan-parser"
    sh  $DBCAN2/hmmscan-parser.sh $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm' > $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm.ps'
    # echo "filtering"
    cat $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm.ps' | awk '$5<1e-15&&$10>0.35' > $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm.ps.stringent.txt'
    # removes duplicates and keeps hit with lowest e-value
    cat $CAZYMES_DIR/Results/$SPECIES'.faa.out.dm.ps.stringent.txt' |  sort -k3,3 -k5,5n | sort -k3,3 -u > $CAZYMES_DIR/$SPECIES'_CAZymes.txt'

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate pyfasta

    # Extracts CAZymes IDs
    cat $CAZYMES_DIR/$SPECIES'_CAZymes.txt' | awk '{print $3}' > $CAZYMES_DIR/$SPECIES'_CAZymes_proteinIDs.txt'
    # Extracts CAZyome
    pyfasta extract --fasta $PROTEOME_DIR/Proteome_headers/$SPECIES.faa --file $CAZYMES_DIR/$SPECIES'_CAZymes_proteinIDs.txt' --header > $CAZYOME/$SPECIES'_CAZyome.faa'
    pyfasta extract --fasta $CDS_DIR/CDS_headers/$SPECIES.codingseq --file $CAZYMES_DIR/$SPECIES'_CAZymes_proteinIDs.txt' --header > $CAZYOME_CDS/$SPECIES'_CAZyome.codingseq'
    # Extracts secreted CAZome IDs
    comm -12 <(sort $CAZYMES_DIR/$SPECIES'_CAZymes_proteinIDs.txt') <(sort $SIGNALP6_DIR/$SPECIES'_secreted_proteinIDs.txt') > $PROT_IDS/$SPECIES'_secreted_CAZymesIDs.txt'
    # Extracts secreted CAZyome
    pyfasta extract --fasta $CAZYOME/$SPECIES'_CAZyome.faa' --file $PROT_IDS/$SPECIES'_secreted_CAZymesIDs.txt' --header > $SECRETED_CAZYOME/$SPECIES'_secreted_CAZyome.faa'
    # Extract secreted CAZyome coding sequences (CDS)
    pyfasta extract --fasta $CAZYOME_CDS/$SPECIES'_CAZyome.codingseq' --file $PROT_IDS/$SPECIES'_secreted_CAZymesIDs.txt' --header > $SECRETED_CAZYOME_CDS/$SPECIES'_secreted_CAZyome.codingseq'

    fi


### EffectorP3 ###
    if [ "$EffectorP3" = "Yes" ]
    then
    python $EffectorP -i $SECRETOME_DIR/$SPECIES'_secretome.faa' -o $EFFECTORS/$SPECIES'_EffectorP.tab' -E $EFFECTORS/$SPECIES'_effectors.faa' -N $EFFECTORS/$SPECIES'_non_effectors.faa'
    cp $EFFECTORS/$SPECIES'_effectors.faa' $EFFECTOROME/

    if [ ! -f $EFFECTOROME/Effectorome_Results.txt ]
    then
        touch $EFFECTOROME/Effectorome_Results.txt
        echo -e ""Species"\t"All Effectors"\t"Apoplastic/cytoplasmic effector"\t"Cytoplasmic effector-copy"\t"Apoplastic effector"\t"Non-effector"" > $EFFECTOROME/Effectorome_Results.txt
    fi

    # Adds results to the file
    NonEff=$(cat $EFFECTORS/$SPECIES'_EffectorP.tab' | sed '1d' | grep -o -P "Non-effector" | wc -l)
    ApopCyto=$(cat $EFFECTORS/$SPECIES'_EffectorP.tab' | sed '1d' | grep -o -P "Apoplastic/cytoplasmic effector" | wc -l)
    CytoApop=$(cat $EFFECTORS/$SPECIES'_EffectorP.tab' | sed '1d' | grep -o -P "Cytoplasmic/apoplastic effector" | wc -l)
    Cyto=$(cat $EFFECTORS/$SPECIES'_EffectorP.tab' | sed '1d' | grep -o -P "Cytoplasmic effector" | wc -l)
    Apop=$(cat $EFFECTORS/$SPECIES'_EffectorP.tab' | sed '1d' | grep -o -P "Apoplastic effector" | wc -l)

    echo -e "$SPECIES\t"$(($Apop+$Cyto+$ApopCyto+$CytoApop))"\t$(($ApopCyto+$CytoApop))\t$Cyto\t$Apop\t$NonEff" >> $EFFECTOROME/Effectorome_Results.txt
    fi



### eggNOG ###
    if [ "$eggNOG" = "Yes" ]
    then

    # python/Python-3.10.2/python $EGGNOG -i $PROTEOME_DIR/Proteome_headers/$SPECIES.faa --cpu 16 -m diamond -d none --tax_scope auto --go_evidence non-electronic --target_orthologs all --seed_ortholog_evalue 0.001 --seed_ortholog_score 60 --query_cover 20 --subject_cover 0 -o $EggNOG_DIR/$SPECIES --dbmem --usemem

    # update 23-04-2024
    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate pythonenv

    python $EGGNOG -i $PROTEOME_DIR/Proteome_headers/$SPECIES.faa --cpu 16 -m diamond -d none --tax_scope auto --go_evidence non-electronic --target_orthologs all --seed_ortholog_evalue 0.001 --seed_ortholog_score 60 --query_cover 20 --subject_cover 0 -o $EggNOG_DIR/$SPECIES --dbmem --usemem

    fi


### CodonR for filtered dataset ###
    if [ "$CodonR_filtered" = "Yes" ]
    then
    # calculates for the whole coding sequence
    $codonM $CDS_DIR/CDS_headers/$SPECIES.codingseq $tAI_DIR/$SPECIES.m

    # for some unknown reason, codonW/codonZ does not allow full paths
    cd $CDS_DIR/CDS_headers/
    $codonZ $SPECIES'.codingseq' $SPECIES'.z'
    mv $CDS_DIR/CDS_headers/$SPECIES'.z' $tAI_DIR/

    # calculates for the secretome
    $codonM $SECRETOME_CDS_DIR/$SPECIES'_secretome.codingseq' $tAI_secretome_DIR/$SPECIES.m

    # for some unknown reason, codonW/codonZ does not allow full paths
    cd $SECRETOME_CDS_DIR
    $codonZ $SPECIES'_secretome.codingseq' $SPECIES'.z'
    mv $SECRETOME_CDS_DIR/$SPECIES'.z' $tAI_secretome_DIR/

    # Generates a table with tRNA(NNN) codon counts, in a specific order (see template, see https://github.com/mariodosreis/tai/blob/master/README.md), required for tRNA adapation index (tAI) calculation in R
    cat $TRNA_DIR/$SPECIES'.out.filtered' | sed 1d | awk -v col=6 -F $'\t' ' {c[$col]++} END{for (i in c) printf("%s\t%s\n",i,c[i])}' > $tAI_DIR/$SPECIES'.counts.filtered'
    awk 'NR == FNR{a[$1] = $2;next}; {print $0, $2 in a?a[$2]: "0"}' $tAI_DIR/$SPECIES'.counts.filtered' $tAI_DIR/tRNA_counts_template.txt | sed 's/tRNA_count 0/tRNA_count/' > $tAI_DIR/$SPECIES'.tRNA.filtered'

    cat $TRNA_DIR/$SPECIES'.out.filtered' | sed 1d | awk -v col=6 -F $'\t' ' {c[$col]++} END{for (i in c) printf("%s\t%s\n",i,c[i])}' > $tAI_secretome_DIR/$SPECIES'.counts.filtered'
    awk 'NR == FNR{a[$1] = $2;next}; {print $0, $2 in a?a[$2]: "0"}' $tAI_secretome_DIR/$SPECIES'.counts.filtered' $tAI_secretome_DIR/tRNA_counts_template.txt | sed 's/tRNA_count 0/tRNA_count/' > $tAI_secretome_DIR/$SPECIES'.tRNA.filtered'
    fi


### pathways pre-processing for tAI calculation ###
    if [ "$tAI_pathways_preprocess" = "Yes" ]
    then

    grep "#" --invert-match $EggNOG_DIR/$SPECIES.emapper.annotations > $EggNOG_DIR/$SPECIES.annotations.txt
    cat $EggNOG_DIR/*header* $EggNOG_DIR/$SPECIES*.annotations.txt > $EggNOG_DIR/$SPECIES.annotations
    rm $EggNOG_DIR/$SPECIES.annotations.txt


    export SPECIES

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate R

    # beginning of R code
    Rscript - <<EOF

    species <- Sys.getenv("SPECIES")

    library(tAI)
    library(tidyr)
    library(dplyr)

    eggnog = read.delim2(paste0("Results/funannotate/EggNOG/", species,".annotations"), header = 1)
    functions = read.delim2("Analyses/funannotate/tAI/eggNOG_categories.txt", header = 1)

    # subsets eggnog to include only the OG category (narr_og_cat)
    eggnog_cat = subset(eggnog, select = c(query_name, narr_og_cat))

    # remove rows with no eggnog categories (-)
    eggnog_cat <- subset(eggnog_cat, eggnog_cat$narr_og_cat!="-")

    # splits entries with multiple categories and removes empty categories (generated by the code during the split)
    tai_genome_info_eggnog = eggnog_cat %>% separate_rows(narr_og_cat, sep = character(1))
    tai_genome_info_eggnog = subset(tai_genome_info_eggnog, narr_og_cat!="")

    # Add functions to categories
    tai_genome_info_eggnog = merge(tai_genome_info_eggnog, functions, by.x="narr_og_cat", by.y = "narr_og_cat")


    #### Subsetting of data

    # subsetting data into METABOLISM
    metabolism_lipid = subset(tai_genome_info_eggnog, narr_og_cat=="I")     # Lipid transport and metabolism [I]
    metabolism_carbos = subset(tai_genome_info_eggnog, narr_og_cat=="G")    # Carbohydrate transport and metabolism [G]            

    metabolism_lipid = select(metabolism_lipid, query_name)
    metabolism_carbos = select(metabolism_carbos, query_name)

    write.table(metabolism_lipid, file = paste0("Results/funannotate/tAI_pathways/genome/",species,"_metabolism_lipid_geneIDs.txt"), sep = "\t", dec=".", quote = F, row.names = F)
    write.table(metabolism_carbos, file = paste0("Results/funannotate/tAI_pathways/genome/",species,"_metabolism_carbos_geneIDs.txt"), sep = "\t", dec=".", quote = F, row.names = F)

    # end of R code
 EOF

    fi


### CodonR for pahtways dataset ###
    if [ "$tAI_pathways_processed" = "Yes" ]
    then

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate pyfasta

    # Extract protein IDs and respective CDS
    grep "$SPECIES" $tAI_pathways_DIR/genome/$SPECIES"_metabolism_lipid_geneIDs.txt" > $tAI_pathways_DIR/genome/$SPECIES"_lipid_IDs"
    pyfasta extract --fasta=$CDS_DIR/CDS_headers/$SPECIES.codingseq --header --file $tAI_pathways_DIR/genome/$SPECIES"_lipid_IDs" > $tAI_pathways_DIR/genome/$SPECIES"_lipid.CDS"

    grep "$SPECIES" $tAI_pathways_DIR/genome/$SPECIES"_metabolism_carbos_geneIDs.txt" > $tAI_pathways_DIR/genome/$SPECIES"_carbos_IDs"
    pyfasta extract --fasta=$CDS_DIR/CDS_headers/$SPECIES.codingseq --header --file $tAI_pathways_DIR/genome/$SPECIES"_carbos_IDs" > $tAI_pathways_DIR/genome/$SPECIES"_carbos.CDS"


    cd $tAI_pathways_DIR/genome/
    codonM $SPECIES"_lipid.CDS" $SPECIES"_lipid.m"
    codonZ $SPECIES"_lipid.CDS" $SPECIES"_lipid.z"

    codonM $SPECIES"_carbos.CDS" $SPECIES"_carbos.m"
    codonZ $SPECIES"_carbos.CDS" $SPECIES"_carbos.z"

    cp $tAI_DIR/$SPECIES".tRNA.filtered" .

    cd 



    export SPECIES

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate R

 # beginning of R code
    Rscript - <<EOF

    species <- Sys.getenv("SPECIES")

    library(tAI)
    library(tidyr)
    library(dplyr)

    ts.lipid.carbs1 <- data.frame(matrix(ncol = 5, nrow = 0))
    colnames(ts.lipid.carbs1) <- c("species", "S_lipids", "S_carbs", "ratio", "Genus")


    setwd("~/Results/funannotate/tAI_pathways/genome/")
    
        tRNA = read.delim(paste(species, ".tRNA.filtered", sep=""), header = 1, row.names = 1)
        tRNA = select(tRNA, tRNA_count)
        ws <- get.ws(tRNA=tRNA[,1], sking=0)

    # lipids
        m = matrix(scan(paste(species, "_lipid.m", sep="")), ncol=61, byrow=TRUE)
        m = m[,-33]
        z = read.delim(paste(species, "_lipid.z", sep=""), header = 1)
        
        tai <- get.tai(m, ws)
        tai=as.data.frame(tai)
        Nc=select(z, Nc)
        GC3s=select(z, GC3s)
        
        S_lipid = get.s(tai[,1], Nc[,1], GC3s[,1]) 
        
        
    # carbs
        m = matrix(scan(paste(species, "_carbos.m", sep="")), ncol=61, byrow=TRUE)
        m = m[,-33]
        z = read.delim(paste(species, "_carbos.z", sep=""), header = 1)
        
        tai <- get.tai(m, ws)
        tai=as.data.frame(tai)
        Nc=select(z, Nc)
        GC3s=select(z, GC3s)
        
        S_carb = get.s(tai[,1], Nc[,1], GC3s[,1]) 
        

        ratio = S_lipid/S_carb
        Genus = substr(species, 1, regexpr("_", species) - 1)

        ts.lipid.carbs1[nrow(ts.lipid.carbs1) + 1,] = c(paste(species), S_lipid, S_carb, ratio, Genus)
        
        write.table(ts.lipid.carbs1, file = paste0("Results/funannotate/tAI_pathways/genome/",species,"_pathways_tAI.txt"), sep = "\t", dec=".", quote = F, row.names = F)

EOF
    fi

### CodonR for all pathways dataset ###
    if [ "$tAI_all_pathways" = "Yes" ]
    then

    # calculates for the whole coding sequence
    $codonM $CDS_DIR/CDS_headers/$SPECIES.codingseq $tAI_DIR/$SPECIES.m

    # for some unknown reason, codonW/codonZ does not allow full paths
    cd $CDS_DIR/CDS_headers/
    $codonZ $SPECIES'.codingseq' $SPECIES'.z'
    mv $CDS_DIR/CDS_headers/$SPECIES'.z' $tAI_DIR/

    # Generates a table with tRNA(NNN) codon counts, in a specific order (see template, see https://github.com/mariodosreis/tai/blob/master/README.md), required for tRNA adapation index (tAI) calculation in R
    cat $TRNA_DIR/$SPECIES'.out.filtered' | sed 1d | awk -v col=6 -F $'\t' ' {c[$col]++} END{for (i in c) printf("%s\t%s\n",i,c[i])}' > $tAI_DIR/$SPECIES'.counts.filtered'
    awk 'NR == FNR{a[$1] = $2;next}; {print $0, $2 in a?a[$2]: "0"}' $tAI_DIR/$SPECIES'.counts.filtered' $tAI_DIR/tRNA_counts_template.txt | sed 's/tRNA_count 0/tRNA_count/' > $tAI_DIR/$SPECIES'.tRNA.filtered'


    export SPECIES

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate R

    # beginning of R code
    Rscript - <<EOF

    species <- Sys.getenv("SPECIES")

    library(tidyr)
    library(dplyr)

    eggnog = read.delim2(paste0("Results/funannotate/EggNOG/", species,".annotations"), header = 1)
    functions = read.delim2("Analyses/funannotate/tAI/eggNOG_categories.txt", header = 1)

    # subsets eggnog to include only the OG category (narr_og_cat)
    eggnog_cat = subset(eggnog, select = c(query_name, narr_og_cat))

    # remove rows with no eggnog categories (-)
    eggnog_cat <- subset(eggnog_cat, eggnog_cat$narr_og_cat!="-")

    # splits entries with multiple categories and removes empty categories (generated by the code during the split)
    tai_genome_info_eggnog = eggnog_cat %>% separate_rows(narr_og_cat, sep = character(1))
    tai_genome_info_eggnog = subset(tai_genome_info_eggnog, narr_og_cat!="")

    # Add functions to categories
    tai_genome_info_eggnog = merge(tai_genome_info_eggnog, functions, by.x="narr_og_cat", by.y = "narr_og_cat")

    tai_export = subset(tai_genome_info_eggnog, Function != "Function unknown")
    tai_export = subset(tai_export, Function != "Function unknown")

    og_cats = unique(as.character(tai_export[ , "narr_og_cat"]))

    for (i in seq_along(og_cats)) {
    pathway <- og_cats[i]
    export_genes = subset(tai_export, narr_og_cat == pathway)
    write.table(export_genes[,2], file = paste0("Results/funannotate/tAI_pathways/genome_all_functions/", species, "_", pathway, "_IDs"), sep = "\t", dec=",", quote = F, row.names = F, col.names = F)
    }

EOF


    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate pyfasta

    for i in $(cat ~/Analyses/funannotate/tAI/eggNOG_categories.txt | sed -n '1d;p' | awk '{print ($1) }'); 
    do 

    # Extract protein IDs and respective CDS
    pyfasta extract --fasta=$CDS_DIR/CDS_headers/$SPECIES.codingseq --header --file $tAI_pathways_DIR/genome_all_functions/$SPECIES"_"${i}"_IDs" > $tAI_pathways_DIR/genome_all_functions/$SPECIES"_"${i}".CDS"

    cd $tAI_pathways_DIR/genome_all_functions/
    codonM $SPECIES"_"${i}".CDS" $SPECIES"_"${i}".m"
    codonZ $SPECIES"_"${i}".CDS" $SPECIES"_"${i}".z"

    done

    cp $tAI_DIR/$SPECIES".tRNA.filtered" .

    cd 


    export SPECIES

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate R

    # beginning of R code
    Rscript - <<EOF

    species <- Sys.getenv("SPECIES")

    library(tAI)
    library(tidyr)
    library(dplyr)

    functions = read.delim2("Analyses/funannotate/tAI/eggNOG_categories.txt", header = 1)

    og_cats = functions[ ,1]

    S_all_functions <- data.frame(matrix(ncol = 3, nrow = 0))
    colnames(S_all_functions) <- c("species", "S", "pathway")


    setwd("Results/funannotate/tAI")

    tRNA = read.delim(paste(species, ".tRNA.filtered", sep=""), header = 1, row.names = 1)
    tRNA = select(tRNA, tRNA_count)
    ws <- get.ws(tRNA=tRNA[,1], sking=0)
    m = matrix(scan(paste(species, ".m", sep="")), ncol=61, byrow=TRUE)
    m = m[,-33]
    z = read.delim(paste(species, ".z", sep=""), header = 1)
    tai <- get.tai(m, ws)
        
    tai=as.data.frame(tai)
    Nc=select(z, Nc)
    GC3s=select(z, GC3s)    

    ts.obs = get.s(tai[,1], Nc[,1], GC3s[,1]) 

    S_all_functions[nrow(S_all_functions) + 1,] = c(paste(species), ts.obs, "genome")
    

    setwd("Results/funannotate/tAI_pathways/genome_all_functions/")

    for (pathway in seq_along(og_cats)) {

    j <- og_cats[pathway]
    
    tryCatch({
    
    CDS = paste(species, "_", j, ".CDS", sep="")
    
    if (file.exists(CDS) && file.size(CDS) > 0) {   
    
        tRNA = read.delim(paste(species, ".tRNA.filtered", sep=""), header = 1, row.names = 1)
        tRNA = select(tRNA, tRNA_count)
        ws <- get.ws(tRNA=tRNA[,1], sking=0)
        m = matrix(scan(paste(species, "_", j,".m", sep="")), ncol=61, byrow=TRUE)
        m = m[,-33]
        z = read.delim(paste(species, "_", j,".z", sep=""), header = 1)
        tai <- get.tai(m, ws)

        tai=as.data.frame(tai)
        Nc=select(z, Nc)
        GC3s=select(z, GC3s)
        
        S = get.s(tai[,1], Nc[,1], GC3s[,1]) 

        S_all_functions[nrow(S_all_functions) + 1,] = c(paste(species), S, j)
        
    }
    })
        }
        
        
    write.table(S_all_functions, file = paste0("Results/funannotate/tAI_pathways/genome_all_functions/", species, "_all_functions_tAI.txt"), sep = "\t", dec=".", quote = F, row.names = F)


EOF

    fi





### RSCU for different datasets ###
    if [ "$RSCU" = "Yes" ]
    then

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate BioKIT

    # genome CDS
    biokit rscu $CDS_DIR/CDS_headers/$SPECIES.codingseq > $RSCU_DIR/genome/$SPECIES'_CDS.rscu'

    # genome secretome
    biokit rscu $SECRETOME_CDS_DIR/$SPECIES'_secretome.codingseq' > $RSCU_DIR/secretome/$SPECIES'_secretome.rscu'

    # lipid pathway CDS
    biokit rscu $tAI_pathways_DIR/genome/$SPECIES"_lipid.CDS" > $RSCU_DIR/lipids/$SPECIES'_lipids.rscu'

    # carbohydrate pathway CDS
    biokit rscu $tAI_pathways_DIR/genome/$SPECIES"_carbos.CDS" > $RSCU_DIR/carbos/$SPECIES'_carbos.rscu'

    # CAZyome CDS
    biokit rscu $CAZYOME_CDS/$SPECIES'_CAZyome.codingseq' > $RSCU_DIR/CAZyome/$SPECIES'_CAZyome.rscu'

    # CAZyome secretome
    biokit rscu $SECRETED_CAZYOME_CDS/$SPECIES'_secreted_CAZyome.codingseq' > $RSCU_DIR/CAZyome_secreted/$SPECIES'_CAZyome_secreted.rscu'

    fi


### Genome Stats ###
    if [ "$GenomeStats" = "Yes" ]
    then

    source ~/Tools/miniconda3/etc/profile.d/conda.sh
    conda activate assembly-stats

    # assembly stats
    assembly-stats -t $GENOMES_DIR/*.fna > ~/Analyses/funannotate/Genome_stats/Genome_stats.txt
    sed -i 's/\.fna//g' ~/Analyses/$DATASET/Genome_stats/Genome_stats.txt
    sed -i 's/\~\/Data\/Genomes\///g' ~/Analyses/$DATASET/Genome_stats/Genome_stats.txt

    assembly-stats -t $CDS_DIR/CDS_headers/*.codingseq > ~/Analyses/funannotate/Genome_stats/CDS_stats.txt
    sed -i 's/\.codingseq//g' ~/Analyses/$DATASET/Genome_stats/CDS_stats.txt
    sed -i 's/\~\/Data\/funannotate\/CDS\/CDS_headers\///g' ~/Analyses/$DATASET/Genome_stats/CDS_stats.txt

    assembly-stats -t $PROTEOME_DIR/Proteome_headers/*.faa > ~/Analyses/funannotate/Genome_stats/Proteome_stats.txt
    sed -i 's/\.faa//g' ~/Analyses/$DATASET/Genome_stats/Proteome_stats.txt
    sed -i 's/\~\/Data\/funannotate\/Proteomes\/Proteome_headers\///g' ~/Analyses/$DATASET/Genome_stats/Proteome_stats.txt

    assembly-stats -t $SECRETOME_DIR/*.faa > ~/Analyses/funannotate/Genome_stats/Secretome_stats.txt
    sed -i 's/_secretome.faa//g' ~/Analyses/$DATASET/Genome_stats/Secretome_stats.txt
    sed -i 's/\~\/Data\/funannotate\/Secretomes_SignalP6\.0\///g' ~/Analyses/$DATASET/Genome_stats/Secretome_stats.txt

    assembly-stats -t $TRNA_DIR/threshold/nopseudogene/*.fasta > ~/Analyses/funannotate/Genome_stats/tRNAs.txt
    sed -i 's/_tRNA.fasta//g' ~/Analyses/$DATASET/Genome_stats/tRNAs.txt
    sed -i 's/\~\/Results\/tRNAscan-SE_2.0.9\/threshold\/nopseudogene\///g' ~/Analyses/$DATASET/Genome_stats/tRNAs.txt

    assembly-stats -t $CAZYOME_CDS/*.codingseq > ~/Analyses/funannotate/Genome_stats/CAZyome.txt
    sed -i 's/_CAZyome.codingseq//g' ~/Analyses/$DATASET/Genome_stats/CAZyome.txt
    sed -i  's/\~\/Data\/funannotate\/CAZyome_CDS\///g' ~/Analyses/$DATASET/Genome_stats/CAZyome.txt

    assembly-stats -t $SECRETED_CAZYOME_CDS/*.codingseq > ~/Analyses/funannotate/Genome_stats/CAZyome_secreted.txt
    sed -i 's/_secreted_CAZyome.codingseq//g' ~/Analyses/$DATASET/Genome_stats/CAZyome_secreted.txt
    sed -i  's/\~\/Data\/funannotate\/Secretomes_SignalP6.0_CAZyome_CDS\///g' ~/Analyses/$DATASET/Genome_stats/CAZyome_secreted.txt


    # GC content
    ~/Tools/bbmap/statswrapper.sh $GENOMES_DIR/*.fna gcformat=2 format=3 > ~/Analyses/funannotate/Genome_stats/GC_genome.txt
    sed -i 's/\.fna//g' ~/Analyses/$DATASET/Genome_stats/GC_genome.txt
    sed -i 's/\~\/Data\/Genomes\///g' ~/Analyses/$DATASET/Genome_stats/GC_genome.txt

    ~/Tools/bbmap/statswrapper.sh $CDS_DIR/CDS_headers/*.codingseq gcformat=2 format=3 > ~/Analyses/funannotate/Genome_stats/GC_CDS.txt
    sed -i 's/\.codingseq//g' ~/Analyses/$DATASET/Genome_stats/GC_CDS.txt
    sed -i 's/\~\/Data\/funannotate\/CDS\/CDS_headers\///g' ~/Analyses/$DATASET/Genome_stats/GC_CDS.txt

    ~/Tools/bbmap/statswrapper.sh $CAZYOME_CDS/*.codingseq gcformat=2 format=3 > ~/Analyses/funannotate/Genome_stats/GC_CAZymes.txt
    sed -i 's/_CAZyome.codingseq//g' ~/Analyses/$DATASET/Genome_stats/GC_CAZymes.txt
    sed -i 's/\~\/Data\/funannotate\/CAZyome_CDS\///g' ~/Analyses/$DATASET/Genome_stats/GC_CAZymes.txt

    fi
